/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 *
 * TODO:
 * - escgrave mod morph
 * - enter_underscore mod morph
 * - populate old enter with mod morph or underscore quote (etc)
 * - hold-tap the ctr keys
 * -   rctrl delete
 * -   lctrl ?
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_L     0
#define NUM_L        1
#define SYM_L        2
#define NAV_L        3

#define XXXXXXXXXX &none
#define ____NA____ &none
#define VVVVVVVVVV &trans

#define Undo   LC(Z)
#define Cut    LC(X)
#define Copy   LC(C)
#define Paste  LC(V)
#define Redo   LC(Y)

#define HT(layer, key) &ht_mo_kp layer key
#define WM(key, num) &wm_##key##_##num
#define WIN_MORPH_MACRO(key, num) \
        wm_##key##_##num: wm_##key##_##num { \
                label = ZMK_MACRO_STRINGIFY(wm_##key##_##num); \
                compatible = "zmk,behavior-mod-morph"; \
                #binding-cells = <0>; \
                bindings = <&kp key>, <&kp N##num>; \
                mods = <(MOD_LGUI)>; \
                keep-mods = <(MOD_LGUI)>; \
        }

/ {
        macros {
                WIN_MORPH_MACRO(A, 0);
                WIN_MORPH_MACRO(S, 1);
                WIN_MORPH_MACRO(D, 2);
                WIN_MORPH_MACRO(F, 3);
                WIN_MORPH_MACRO(X, 4);
                WIN_MORPH_MACRO(C, 5);
                WIN_MORPH_MACRO(V, 6);
                WIN_MORPH_MACRO(W, 7);
                WIN_MORPH_MACRO(E, 8);
                WIN_MORPH_MACRO(R, 9);

                lsft_sqt: lsft_sqt {
                        label = "lsft_sqt";
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp LSFT>, <&kp SQT>;
                        mods = <(MOD_RSFT)>;
                };

                rsft_dqt: rsft_dqt {
                        label = "rsft_sqt";
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp RSFT>, <&kp DQT>;
                        mods = <(MOD_LSFT)>;
                };        
                
                esc_grave: esc_grave {
                        label = "esc_grave";
                        compatible = "zmk,behavior-mod-morph";
                        #binding-cells = <0>;
                        bindings = <&kp ESC>, <&kp GRAVE>;
                        mods = <(MOD_RSFT)>;
                };

                ht_mo_kp: ht_mo_kp {
                        label = "ht_mo_kp";
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "hold-preferred";
                        tapping-term-ms = <200>;
                        bindings = <&mo>, <&kp>;
                };
                
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&esc_grave    &kp  Q        WM(W, 7)      WM(E, 8)      WM(R, 9)      &kp  T                                                                                       &kp  Y            &kp  U        &kp  I        &kp  O        &kp  P        &kp  MINUS
&lsft_sqt     WM(A, 0)      WM(S, 1)      WM(D, 2)      WM(F, 3)      &kp  G                                                                                       &kp  H            &kp  J        &kp  K        &kp  L        &kp  SEMI     &rsft_dqt
&kp  LALT     &kp  Z        WM(X, 4)      WM(C, 5)      WM(V, 6)      &kp  B        XXXXXXXXXX                                                  XXXXXXXXXX         &kp  N            &kp  M        &kp  COMMA    &kp  DOT      &kp  FSLH     &kp  RALT
XXXXXXXXXX    XXXXXXXXXX    XXXXXXXXXX                  XXXXXXXXXX    XXXXXXXXXX    &kp LGUI            &kp  BSPC             HT(SYM_L, SPACE)  HT(NUM_L, ENTER)   XXXXXXXXXX        XXXXXXXXXX                  XXXXXXXXXX    XXXXXXXXXX    XXXXXXXXXX
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;      
                };

                num_layer {
                        bindings = <
VVVVVVVVVV    &kp  LBKT     &kp  N7       &kp  N8       &kp  N9       &kp  RBKT                                                                                    VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    &kp  N0       &kp  N1       &kp  N2       &kp  N3       &kp  BSLH                                                                                    VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    &kp  GRAVE    &kp  N4       &kp  N5       &kp  N6       &kp  EQUAL    VVVVVVVVVV                                                  VVVVVVVVVV         VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                  VVVVVVVVVV    VVVVVVVVVV    &kp UNDER           &kp TAB               VVVVVVVVVV        ____NA____         VVVVVVVVVV        VVVVVVVVVV                  VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
                        >;
			
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };

                sym_layer {
                        bindings = <
VVVVVVVVVV    &kp LBRC      &kp AMPS      &kp ASTRK     &kp LPAR      &kp RBRC                                                                                     VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    &kp TILDE     &kp EXCL      &kp AT        &kp POUND     &kp PIPE                                                                                     VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    &kp COLON     &kp DOLLAR    &kp PERCENT   &kp CARET     &kp PLUS      VVVVVVVVVV                                                  VVVVVVVVVV         VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                  VVVVVVVVVV    &kp RPAR      &kp UNDER           &kp TAB               ____NA____        VVVVVVVVVV         VVVVVVVVVV        VVVVVVVVVV                  VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
                        >;
			
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;      
                };

               nav_layer {
                        bindings = <
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                                                                                   VVVVVVVVVV        VVVVVVVVVV    &kp PG_UP     VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                                                                                   &kp LEFT          &kp DOWN      &kp UP        &kp RIGHT     VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                                                  VVVVVVVVVV         VVVVVVVVVV        &kp HOME      &kp PG_DN     &kp END       VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                  VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV          VVVVVVVVVV            VVVVVVVVVV        ____NA____         VVVVVVVVVV        VVVVVVVVVV                  VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
                        >;
			
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;      
                };

                empty_layer {
                        bindings = <
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                                                                                   VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                                                                                   VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                                                  VVVVVVVVVV         VVVVVVVVVV        VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV                  VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV          VVVVVVVVVV            VVVVVVVVVV        VVVVVVVVVV         VVVVVVVVVV        VVVVVVVVVV                  VVVVVVVVVV    VVVVVVVVVV    VVVVVVVVVV
                        >;
			
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
                };
        };
};
